service: toe-api-v3

package:
  exclude:
    - mysql-dumps/**
    - tests/**
    - logs/**
    - cron-jobs/**
provider:
  name: aws
  region: us-east-1
  runtime: provided
  vpc:
    securityGroupIds:
      - Fn::GetAtt: [AppDBSecurity, GroupId]
    subnetIds: ${file(./account_config.yml):SubnetIds}
  environment:
    TOE_DATABASE_HOST: ${self:custom.TOE_DATABASE.HOST}
    TOE_DATABASE_PORT: ${self:custom.TOE_DATABASE.PORT}
    TOE_DATABASE_USER: ${self:custom.TOE_DATABASE.USER}
    TOE_DATABASE_PASSWORD: ${self:custom.TOE_DATABASE.PASSWORD}
custom:
  TOE_DATABASE:
    HOST:
      Fn::GetAtt: [AppDB, Endpoint.Address]
    PORT:
      Fn::GetAtt: [AppDB, Endpoint.Port]
    USER: ${ssm:/toe/prod/DBApiUsername}
    PASSWORD: ${ssm:/toe/prod/DBApiPass}
plugins:
  - ./vendor/bref/bref

resources:
  Resources:
    AppDBParams:
      Type: AWS::RDS::DBParameterGroup
      Properties:
        Description: pg for the trick-or-eat database
        Family: mysql5.7
    AppDBSecurity:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: 'rds sg for the trick-or-eat app'
        VpcId: ${file(./account_config.yml):VpcId}
    AppDBSecurityIngress:
      Type: AWS::EC2::SecurityGroupIngress
      Properties:
        GroupId: !Ref AppDBSecurity
        IpProtocol: tcp
        FromPort: 3306
        ToPort: 3306
        SourceSecurityGroupId: !Ref AppDBSecurity
    AppDBSubnetGroup:
      Type: AWS::RDS::DBSubnetGroup
      Properties:
        DBSubnetGroupDescription: subnet group for trick-or-eat databases
        DBSubnetGroupName: rds-trick-or-eat
        SubnetIds: ${file(./account_config.yml):SubnetIds}
    AppDB:
      Type: 'AWS::RDS::DBInstance'
      Properties:
        AllocatedStorage: 20
        AllowMajorVersionUpgrade: true
        AutoMinorVersionUpgrade: true
        BackupRetentionPeriod: 3
        DBInstanceClass: db.t2.micro
        DBInstanceIdentifier: trick-or-eat
        DBName: toe
        DBParameterGroupName: !Ref AppDBParams
        VPCSecurityGroups:
          - !Ref AppDBSecurity
        DBSubnetGroupName: !Ref AppDBSubnetGroup
        EnablePerformanceInsights: false
        Engine: mysql
        EngineVersion: 5.7.26
        MasterUsername: ${ssm:/toe/prod/DBMasterUsername}
        MasterUserPassword: ${ssm:/toe/prod/DBMasterPass}
        MultiAZ: false
        Port: 3306
        PubliclyAccessible: false
        StorageType: standard
    CloudfrontOAI:
      Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: static content for TOE
    WebsiteCDN:
      Type: 'AWS::CloudFront::Distribution'
      Properties:
        DistributionConfig:
          Origins:
          - DomainName: !Join ['.', ['${ssm:/toe/prod/CFBucketName}', 's3.amazonaws.com'] ]
            Id: ToeS3Origin
            S3OriginConfig:
              OriginAccessIdentity: !Join ['/', ['origin-access-identity/cloudfront', !Ref CloudfrontOAI ] ]
          Enabled: 'true'
          Comment: 'Trick or eat distribution'
          DefaultRootObject: index.html
          Aliases:
            - www.guelphtrickoreat.ca
            - guelphtrickoreat.ca
          DefaultCacheBehavior:
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
            TargetOriginId: ToeS3Origin
            ForwardedValues:
              QueryString: 'false'
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
          PriceClass: PriceClass_100
          Restrictions:
            GeoRestriction:
              RestrictionType: whitelist
              Locations:
                - CA
                - US
                - AU # Australia
                - BE # Belgium
                - DK # Denmark
                - DE # Germany
                - IE # Ireland
                - IL # Israel
                - NZ # New Zealand
                - NL # Netherlands
                - CH # Switzerland
                - IO # British Indian Ocean Territory
                - IT # Italy
                - JP # Japan
                - MY # Malaysia
          ViewerCertificate:
            MinimumProtocolVersion: TLSv1.1_2016
            SslSupportMethod: sni-only
            AcmCertificateArn: ${file(./account_config.yml):ACMCertificateArn}
      DependsOn:
        - CloudfrontOAI
    WebsiteDNSRecord:
      Type: 'AWS::Route53::RecordSet'
      Properties:
        HostedZoneName: !Join ['', [ '${ssm:/toe/prod/BaseDomain}', '.' ] ]
        AliasTarget:
          DNSName: !GetAtt WebsiteCDN.DomainName
          HostedZoneId: Z2FDTNDATAQYW2
        Name: guelphtrickoreat.ca.
        Type: A
      DependsOn:
        - WebsiteCDN
    CFBucketPolicyS3:
      Type: 'AWS::S3::BucketPolicy'
      Properties:
        Bucket: guelphtrickoreat.ca
        PolicyDocument:
          Version: '2008-10-17'
          Id: PolicyForTOECloudFrontPrivateContent
          Statement:
            - Sid: '1'
              Effect: Allow
              Principal:
                AWS: !Join [' ', ['arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity', !Ref CloudfrontOAI ] ]
              Action: s3:GetObject
              Resource: !Join ['', ['arn:aws:s3:::', '${ssm:/toe/prod/CFBucketName}', '/*' ] ]
      DependsOn:
        - CloudfrontOAI
  Outputs:
    AppDBSecurityGroup:
      Value: !GetAtt AppDBSecurity.GroupId
    AppDBHost:
      Value: !GetAtt AppDB.Endpoint.Address
    AppDBPort:
      Value: !GetAtt AppDB.Endpoint.Port


functions:
  api:
    handler: public/index.php
    description: 'The entire trick-or-eat api backend'
    timeout: 30 # in seconds (API Gateway has a timeout of 30 seconds)
    layers:
      - ${bref:layer.php-72-fpm}
    events:
      - http: 'ANY /'
      - http: 'ANY /{proxy+}'
  clean-reset-tokens:
    handler: cron-jobs/clean-reset-tokens/run.php
    layers:
      - ${bref:layer.php-72}
    events:
      - schedule: cron(45 0 1 * * *) # For the demo, only needs to run once a month. Should be changed to every hour in prod
  init-db:
    handler: cron-jobs/init-db/run.php
    description: 'A cron job that will initialize the tables in the RDS backend'
    timeout: 300 # in seconds (max time for lambda to run mysqldump)
    layers:
      - ${bref:layer.php-72}

## In order to print out the hosted domain via `serverless info` we need to define the DomainName output for CloudFormation
Outputs:
  WebsiteCDNOutput:
    Value:
      Fn::GetAtt: [ WebsiteCDN, DomainName ]
  AppDBName:
    Value:
      Ref: AppDB
  AppDBHost:
    Value:
      Fn::GetAtt: [AppDB, Endpoint.Address]

# on the hooks, use aws:deploy:finalize:cleanup
