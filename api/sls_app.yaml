service: toe-api

package:
  exclude:
    - tests/**
    - logs/**
    - resource/**
  include:
    - ../.docker/mysql/data/**
provider:
  name: aws
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  runtime: provided
  vpc:
    securityGroupIds:
      - ${self:custom.TOE_DATABASE_SG}
    subnetIds: ${file(./account_config.yaml):SubnetIds}
  environment:
    TOE_DATABASE_HOST: ${self:custom.TOE_DATABASE.HOST}
    TOE_DATABASE_PORT: ${self:custom.TOE_DATABASE.PORT}
    TOE_DATABASE_USER: ${self:custom.TOE_DATABASE.USER}
    TOE_DATABASE_PASSWORD: ${self:custom.TOE_DATABASE.PASSWORD}
    TOE_REDIS_LOGGING_IP: ${self:custom.TOE_REDIS.IP}
    TOE_REDIS_LOGGING_PORT: ${self:custom.TOE_REDIS.PORT}
    TOE_REDIS_PASSWORD: ${self:custom.TOE_REDIS.PASSWORD}
    TOE_ENCODED_JWT_KEY: ${self:custom.TOE_JWT}
    TOE_LOGGING_LEVEL: ${self:custom.TOE_LOGGING_LEVEL}
custom:
  PERSIST_STACK_NAME: toe-api-data-persistence
  TOE_DATABASE:
    HOST: ${cf:${self:custom.PERSIST_STACK_NAME}-${self:provider.stage}.AppDBHost}
    PORT: ${cf:${self:custom.PERSIST_STACK_NAME}-${self:provider.stage}.AppDBPort}
    USER: ${cf:${self:custom.PERSIST_STACK_NAME}-${self:provider.stage}.AppDBUsername}
    PASSWORD: ${cf:${self:custom.PERSIST_STACK_NAME}-${self:provider.stage}.AppDBPassword}
  TOE_REDIS:
    IP: ${cf:${self:custom.PERSIST_STACK_NAME}-${self:provider.stage}.AppRedisIP}
    PORT: ${cf:${self:custom.PERSIST_STACK_NAME}-${self:provider.stage}.AppRedisPort}
    PASSWORD: ''
  TOE_DATABASE_SG: ${cf:${self:custom.PERSIST_STACK_NAME}-${self:provider.stage}.AppDBSecurityGroupId}
  TOE_JWT: ${ssm:/toe/prod/TOE_ENCODED_JWT_KEY}
  TOE_LOGGING_LEVEL: 'INFO'

plugins:
  - ./vendor/bref/bref
resources:
  Resources:
    CloudfrontOAI:
      Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: static content for TOE
    WebsiteCDN:
      Type: 'AWS::CloudFront::Distribution'
      Properties:
        DistributionConfig:
          Origins:
          - DomainName: !Join ['.', ['${ssm:/toe/prod/CFBucketName}', 's3.amazonaws.com'] ]
            Id: ToeS3Origin
            S3OriginConfig:
              OriginAccessIdentity: !Join ['/', ['origin-access-identity/cloudfront', !Ref CloudfrontOAI ] ]
          Enabled: 'true'
          Comment: 'Trick or eat distribution'
          DefaultRootObject: index.html
          Aliases:
            - www.guelphtrickoreat.ca
            - guelphtrickoreat.ca
          DefaultCacheBehavior:
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
            TargetOriginId: ToeS3Origin
            ForwardedValues:
              QueryString: 'false'
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
          PriceClass: PriceClass_100
          Restrictions:
            GeoRestriction:
              RestrictionType: whitelist
              Locations:
                - CA
                - US
                - AU # Australia
                - BE # Belgium
                - DK # Denmark
                - DE # Germany
                - IE # Ireland
                - IL # Israel
                - NZ # New Zealand
                - NL # Netherlands
                - CH # Switzerland
                - IO # British Indian Ocean Territory
                - IT # Italy
                - JP # Japan
                - MY # Malaysia
          ViewerCertificate:
            MinimumProtocolVersion: TLSv1.1_2016
            SslSupportMethod: sni-only
            AcmCertificateArn: ${file(./account_config.yaml):ACMCertificateArn}
      DependsOn:
        - CloudfrontOAI
    WebsiteDNSRecord:
      Type: 'AWS::Route53::RecordSet'
      Properties:
        HostedZoneName: !Join ['', [ '${ssm:/toe/prod/BaseDomain}', '.' ] ]
        AliasTarget:
          DNSName: !GetAtt WebsiteCDN.DomainName
          HostedZoneId: Z2FDTNDATAQYW2
        Name: guelphtrickoreat.ca.
        Type: A
      DependsOn:
        - WebsiteCDN
    CFBucketPolicyS3:
      Type: 'AWS::S3::BucketPolicy'
      Properties:
        Bucket: guelphtrickoreat.ca
        PolicyDocument:
          Version: '2008-10-17'
          Id: PolicyForTOECloudFrontPrivateContent
          Statement:
            - Sid: '1'
              Effect: Allow
              Principal:
                AWS: !Join [' ', ['arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity', !Ref CloudfrontOAI ] ]
              Action: s3:GetObject
              Resource: !Join ['', ['arn:aws:s3:::', '${ssm:/toe/prod/CFBucketName}', '/*' ] ]
      DependsOn:
        - CloudfrontOAI

functions:
  api:
    handler: public/index.php
    description: 'The entire trick-or-eat api backend'
    timeout: 30 # in seconds (API Gateway has a timeout of 30 seconds)
    layers:
      - ${bref:layer.php-72-fpm}
    events:
      - http:
         path: '/'
         method: 'ANY'
         cors:
           origin: ${ssm:/toe/prod/ClientDomain}
           headers:
             - Content-Type
             - Accept-Encoding
             - X-Bearer-Token
           allowCredentials: false
      - http:
         path: '/{proxy+}'
         method: 'ANY'
         cors:
           origin: ${ssm:/toe/prod/ClientDomain}
           headers:
             - Content-Type
             - Accept-Encoding
             - X-Bearer-Token
           allowCredentials: false
  clean-reset-tokens:
    handler: cron-jobs/clean-reset-tokens/run.php
    layers:
      - ${bref:layer.php-72}
    events:
      - schedule: cron(45 0 1 * ? *) # For the demo, only needs to run once a month. Should be changed to every hour in prod
  init-db:
    handler: bin/console.php
    description: 'A cron job that will initialize the tables in the RDS backend'
    timeout: 300 # in seconds (max time for lambda to run mysqldump)
    layers:
      - ${bref:layer.php-72}
      - ${bref:layer.console}

## In order to print out the hosted domain via `serverless info` we need to define the DomainName output for CloudFormation
Outputs:
#  WebsiteCDNOutput:
#    Value:
#      Fn::GetAtt: [ WebsiteCDN, DomainName ]
#  AppDBName:
#    Value: !Ref AppDB
#  AppDBHost:
#    Value: !GetAtt AppDB.Endpoint.Address
#  AppDBPort:
#    Value: !GetAtt AppDB.Endpoint.Port
#  AppDBSecurityGroup:
#    Value: !GetAtt AppDBSecurity.GroupId

# on the hooks, use aws:deploy:finalize:cleanup
